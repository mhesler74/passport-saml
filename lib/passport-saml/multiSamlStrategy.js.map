{"version":3,"file":"multiSamlStrategy.js","sourceRoot":"","sources":["../../src/passport-saml/multiSamlStrategy.ts"],"names":[],"mappings":"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","sourcesContent":["import * as util from 'util';\r\nimport * as saml from './saml';\r\nimport {CacheProvider as InMemoryCacheProvider} from './inmemory-cache-provider';\r\nimport SamlStrategy = require('./strategy');\r\nimport type { Request } from 'express';\r\nimport { AuthenticateOptions, AuthorizeOptions, MultiSamlConfig, RequestWithUser, VerifyWithoutRequest, VerifyWithRequest } from './types';\r\n\r\nclass MultiSamlStrategy extends SamlStrategy {\r\n  _options: MultiSamlConfig\r\n  constructor(options: MultiSamlConfig, verify: VerifyWithRequest | VerifyWithoutRequest) {\r\n    if (!options || typeof options.getSamlOptions != 'function') {\r\n      throw new Error('Please provide a getSamlOptions function');\r\n    }\r\n\r\n    if(!options.requestIdExpirationPeriodMs){\r\n      options.requestIdExpirationPeriodMs = 28800000;  // 8 hours\r\n    }\r\n\r\n    if(!options.cacheProvider){\r\n        options.cacheProvider = new InMemoryCacheProvider(\r\n            {keyExpirationPeriodMs: options.requestIdExpirationPeriodMs });\r\n    }\r\n\r\n    super(options, verify);\r\n    this._options = options;\r\n  }\r\n\r\n  authenticate(req: RequestWithUser, options: AuthenticateOptions & AuthorizeOptions) {\r\n    this._options.getSamlOptions(req, (err, samlOptions) => {\r\n      if (err) {\r\n        return this.error(err);\r\n      }\r\n\r\n      const samlService = new saml.SAML({...this._options, ...samlOptions});\r\n      const strategy = Object.assign({}, this, {_saml: samlService});\r\n      Object.setPrototypeOf(strategy, this);\r\n      super.authenticate.call(strategy, req, options);\r\n    });\r\n  }\r\n\r\n  logout(req: RequestWithUser, callback: (err: Error | null, url?: string | null | undefined) => void) {\r\n    this._options.getSamlOptions(req, (err, samlOptions) => {\r\n      if (err) {\r\n        return callback(err);\r\n      }\r\n\r\n      const samlService = new saml.SAML(Object.assign({}, this._options, samlOptions));\r\n      const strategy = Object.assign({}, this, {_saml: samlService});\r\n      Object.setPrototypeOf(strategy, this);\r\n      super.logout.call(strategy, req, callback);\r\n    });\r\n  }\r\n\r\n  /** @ts-expect-error typescript disallows changing method signature in a subclass */\r\n  generateServiceProviderMetadata(\r\n    req: Request,\r\n    decryptionCert: string | null,\r\n    signingCert: string | null,\r\n    callback: (err: Error | null, metadata?: string) => void\r\n  ) {\r\n    if (typeof callback !== 'function') {\r\n      throw new Error(\"Metadata can't be provided synchronously for MultiSamlStrategy.\");\r\n    }\r\n\r\n    return this._options.getSamlOptions(req, (err, samlOptions) => {\r\n      if (err) {\r\n        return callback(err);\r\n      }\r\n\r\n      const samlService = new saml.SAML(Object.assign({}, this._options, samlOptions));\r\n      const strategy = Object.assign({}, this, {_saml: samlService});\r\n      Object.setPrototypeOf(strategy, this);\r\n      return callback(null, super.generateServiceProviderMetadata.call(strategy, decryptionCert, signingCert));\r\n    });\r\n  }\r\n}\r\n\r\nexport = MultiSamlStrategy;\r\n"]}
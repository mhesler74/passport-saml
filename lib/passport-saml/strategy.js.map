{"version":3,"file":"strategy.js","sourceRoot":"","sources":["../../src/passport-saml/strategy.ts"],"names":[],"mappings":";AAAA,yDAAiE;AACjE,+BAA+B;AAC/B,2BAA2B;AAI3B,MAAM,QAAS,SAAQ,4BAAgB;IAMrC,YAAY,OAAmB,EAAE,MAAgD;QAC/E,KAAK,EAAE,CAAC;QACR,IAAI,OAAO,OAAO,IAAI,UAAU,EAAE;YAChC,MAAM,GAAG,OAAO,CAAC;YACjB,OAAO,GAAG,EAAE,CAAC;SACd;QAED,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;SAC5E;QAED,+FAA+F;QAC/F,uEAAuE;QACvE,IAAK,OAAO,CAAC,IAAI,EAAE;YACjB,IAAI,CAAC,IAAI,GAAI,OAAO,CAAC,IAAI,CAAC;SAC3B;aAAM;YACL,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC;SACpB;QAGD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACpC,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC;IACxD,CAAC;IAED,YAAY,CAAC,GAAoB,EAAE,OAA+C;QAEhF,OAAO,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,IAAI,eAAe,CAAC;QAE/D,MAAM,gBAAgB,GAAG,CAAC,GAAiB,EAAE,OAAwB,EAAE,SAAmB,EAAE,EAAE;YAC1F,IAAI,GAAG,EAAE;gBACP,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aACxB;YAED,IAAI,SAAS,EAAE;gBACb,GAAG,CAAC,MAAM,EAAE,CAAC;gBACb,IAAI,OAAO,EAAE;oBACX,GAAG,CAAC,iBAAiB,GAAG,OAAO,CAAC;oBAChC,OAAO,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,GAAG,EAAE,OAAO,EAAE,iBAAiB,CAAC,CAAC;iBACzE;gBACD,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;aACpB;YAED,MAAM,QAAQ,GAAG,CAAC,GAAiB,EAAE,IAA8B,EAAE,IAA8B,EAAE,EAAE;gBACrG,IAAI,GAAG,EAAE;oBACP,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBACxB;gBAED,IAAI,CAAC,IAAI,EAAE;oBACT,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;iBAC7B;gBAED,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAC3B,CAAC,CAAC;YAEF,IAAI,IAAI,CAAC,kBAAkB,EAAE;gBAC1B,IAAI,CAAC,OAA6B,CAAC,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;aAC7D;iBAAM;gBACJ,IAAI,CAAC,OAAgC,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;aAC3D;QACL,CAAC,CAAC;QAEF,MAAM,iBAAiB,GAAG,CAAC,GAAiB,EAAE,GAAmB,EAAE,EAAE;YACnE,IAAI,GAAG,EAAE;gBACP,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aACjB;iBAAM;gBACL,IAAI,CAAC,QAAQ,CAAC,GAAI,CAAC,CAAC;aACrB;QACH,CAAC,CAAC;QAEF,IAAI,GAAG,CAAC,KAAK,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,YAAY,IAAI,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE;YAClE,MAAM,aAAa,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;YAC/C,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC;SACzE;aAAM,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE;YAC5C,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,GAAG,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;SAC7D;aAAM,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE;YAC3C,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,GAAG,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;SAC5D;aAAM;YACL,MAAM,cAAc,GAAG;gBACrB,eAAe,EAAE,GAAG,EAAE;oBACpB,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,mBAAmB,KAAK,WAAW,EAAE;wBAC1D,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC,GAAiB,EAAE,IAAU,EAAE,EAAE;4BACjE,IAAI,GAAG,EAAE;gCACP,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;6BACjB;iCAAM;gCACL,MAAM,GAAG,GAAG,GAAG,CAAC,GAAI,CAAC;gCACrB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;6BAChB;wBACH,CAAC,CAAC,CAAC;qBACJ;yBAAM,EAAE,4BAA4B;wBACnC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE,OAAO,EAAE,iBAAiB,CAAC,CAAC;qBAC7D;gBACH,CAAC;gBACD,gBAAgB,EAAE,GAAG,EAAE;oBACnB,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,EAAE,OAAO,EAAE,iBAAiB,CAAC,CAAC;gBAC7D,CAAC;aACF,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YAExB,IAAI,OAAO,cAAc,KAAK,UAAU,EAAE;gBACxC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACvB;YAED,cAAc,EAAE,CAAC;SAClB;IACH,CAAC;IAED,MAAM,CAAC,GAAoB,EAAE,QAA0D;QACrF,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC;IAC7C,CAAC;IAED,+BAA+B,CAAE,cAA6B,EAAE,WAA2B;QACzF,OAAO,IAAI,CAAC,KAAK,CAAC,+BAA+B,CAAE,cAAc,EAAE,WAAW,CAAE,CAAC;IACnF,CAAC;CACF;AAED,iBAAS,QAAQ,CAAC","sourcesContent":["import { Strategy as PassportStrategy } from 'passport-strategy';\r\nimport * as saml from './saml';\r\nimport * as url from 'url';\r\nimport { AuthenticateOptions, AuthorizeOptions, RequestWithUser, SamlConfig, VerifyWithoutRequest, VerifyWithRequest } from './types';\r\nimport { Profile } from './types';\r\n\r\nclass Strategy extends PassportStrategy {\r\n  name: string;\r\n  _verify: VerifyWithRequest | VerifyWithoutRequest;\r\n  _saml: saml.SAML;\r\n  _passReqToCallback?: boolean;\r\n\r\n  constructor(options: SamlConfig, verify: VerifyWithRequest | VerifyWithoutRequest) {\r\n    super();\r\n    if (typeof options == 'function') {\r\n      verify = options;\r\n      options = {};\r\n    }\r\n\r\n    if (!verify) {\r\n      throw new Error('SAML authentication strategy requires a verify function');\r\n    }\r\n\r\n    // Customizing the name can be useful to support multiple SAML configurations at the same time.\r\n    // Unlike other options, this one gets deleted instead of passed along.\r\n    if  (options.name) {\r\n      this.name  = options.name;\r\n    } else {\r\n      this.name = 'saml';\r\n    }\r\n\r\n\r\n    this._verify = verify;\r\n    this._saml = new saml.SAML(options);\r\n    this._passReqToCallback = !!options.passReqToCallback;\r\n  }\r\n\r\n  authenticate(req: RequestWithUser, options: AuthenticateOptions & AuthorizeOptions): void {\r\n\r\n    options.samlFallback = options.samlFallback || 'login-request';\r\n\r\n    const validateCallback = (err: Error | null, profile?: Profile | null, loggedOut?: boolean) => {\r\n        if (err) {\r\n          return this.error(err);\r\n        }\r\n\r\n        if (loggedOut) {\r\n          req.logout();\r\n          if (profile) {\r\n            req.samlLogoutRequest = profile;\r\n            return this._saml.getLogoutResponseUrl(req, options, redirectIfSuccess);\r\n          }\r\n          return this.pass();\r\n        }\r\n\r\n        const verified = (err: Error | null, user?: Record<string, unknown>, info?: Record<string, unknown>) => {\r\n          if (err) {\r\n            return this.error(err);\r\n          }\r\n\r\n          if (!user) {\r\n            return this.fail(info, 401);\r\n          }\r\n\r\n          this.success(user, info);\r\n        };\r\n\r\n        if (this._passReqToCallback) {\r\n          (this._verify as VerifyWithRequest)(req, profile, verified);\r\n        } else {\r\n          (this._verify as VerifyWithoutRequest)(profile, verified);\r\n        }\r\n    };\r\n\r\n    const redirectIfSuccess = (err: Error | null, url?: string | null) => {\r\n      if (err) {\r\n        this.error(err);\r\n      } else {\r\n        this.redirect(url!);\r\n      }\r\n    };\r\n\r\n    if (req.query && (req.query.SAMLResponse || req.query.SAMLRequest)) {\r\n      const originalQuery = url.parse(req.url).query;\r\n      this._saml.validateRedirect(req.query, originalQuery, validateCallback);\r\n    } else if (req.body && req.body.SAMLResponse) {\r\n      this._saml.validatePostResponse(req.body, validateCallback);\r\n    } else if (req.body && req.body.SAMLRequest) {\r\n      this._saml.validatePostRequest(req.body, validateCallback);\r\n    } else {\r\n      const requestHandler = {\r\n        'login-request': () => {\r\n          if (this._saml.options.authnRequestBinding === 'HTTP-POST') {\r\n            this._saml.getAuthorizeForm(req, (err: Error | null, data?: any) => {\r\n              if (err) {\r\n                this.error(err);\r\n              } else {\r\n                const res = req.res!;\r\n                res.send(data);\r\n              }\r\n            });\r\n          } else { // Defaults to HTTP-Redirect\r\n            this._saml.getAuthorizeUrl(req, options, redirectIfSuccess);\r\n          }\r\n        },\r\n        'logout-request': () => {\r\n            this._saml.getLogoutUrl(req, options, redirectIfSuccess);\r\n        }\r\n      }[options.samlFallback];\r\n\r\n      if (typeof requestHandler !== 'function') {\r\n        return this.fail(401);\r\n      }\r\n\r\n      requestHandler();\r\n    }\r\n  }\r\n\r\n  logout(req: RequestWithUser, callback: (err: Error | null, url?: string | null) => void): void {\r\n    this._saml.getLogoutUrl(req, {}, callback);\r\n  }\r\n\r\n  generateServiceProviderMetadata( decryptionCert: string | null, signingCert?: string | null ): string {\r\n    return this._saml.generateServiceProviderMetadata( decryptionCert, signingCert );\r\n  }\r\n}\r\n\r\nexport = Strategy;\r\n"]}
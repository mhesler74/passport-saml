{"version":3,"file":"saml.js","sourceRoot":"","sources":["../../src/passport-saml/saml.ts"],"names":[],"mappings":"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","sourcesContent":["import Debug from 'debug';\r\nconst debug = Debug('passport-saml');\r\nimport * as zlib from 'zlib';\r\nimport * as xml2js from 'xml2js';\r\nimport * as xmlCrypto from 'xml-crypto';\r\nimport * as crypto from 'crypto';\r\nimport * as xmldom from 'xmldom';\r\nimport * as url from 'url';\r\nimport * as querystring from 'querystring';\r\nimport * as xmlbuilder from 'xmlbuilder';\r\nimport * as xmlenc from 'xml-encryption';\r\nimport * as util from 'util';\r\nimport {CacheProvider as InMemoryCacheProvider} from './inmemory-cache-provider';\r\nimport * as algorithms from './algorithms';\r\nimport { signAuthnRequestPost } from './saml-post-signing';\r\nimport type { Request } from 'express';\r\nimport { ParsedQs } from 'qs';\r\nimport { AudienceRestrictionXML,\r\n         AuthenticateOptions,\r\n         AuthorizeOptions,\r\n         AuthorizeRequestXML,\r\n         CertCallback,\r\n         LogoutRequestXML,\r\n         Profile,\r\n         RequestWithUser,\r\n         SAMLOptions,\r\n         SamlIDPListConfig,\r\n         SamlIDPEntryConfig,\r\n         SamlScopingConfig,\r\n         ServiceMetadataXML,\r\n         XMLInput,\r\n         XMLObject,\r\n         XMLOutput,\r\n         XMLValue\r\n       } from './types';\r\nconst { xpath } = xmlCrypto;\r\n\r\ninterface NameID {\r\n    value: string | null;\r\n    format: string | null;\r\n}\r\n\r\nfunction processValidlySignedPostRequest(self: SAML, doc: XMLOutput, dom: Document, callback: (err: Error | null, profile?: Profile, loggedOut?: boolean) => void) {\r\n  const request = doc.LogoutRequest;\r\n  if (request) {\r\n    const profile = {} as Profile;\r\n    if (request.$.ID) {\r\n        profile.ID = request.$.ID;\r\n    } else {\r\n      return callback(new Error('Missing SAML LogoutRequest ID'));\r\n    }\r\n    const issuer = request.Issuer;\r\n    if (issuer && issuer[0]._) {\r\n      profile.issuer = issuer[0]._;\r\n    } else {\r\n      return callback(new Error('Missing SAML issuer'));\r\n    }\r\n    self.getNameID(self, dom, function (err, nameID) {\r\n      if(err) {\r\n        return callback(err);\r\n      }\r\n\r\n      if (nameID) {\r\n        profile.nameID = nameID.value;\r\n        if (nameID.format) {\r\n          profile.nameIDFormat = nameID.format;\r\n        }\r\n      } else {\r\n        return callback(new Error('Missing SAML NameID'));\r\n      }\r\n      const sessionIndex = request.SessionIndex;\r\n      if (sessionIndex) {\r\n        profile.sessionIndex = sessionIndex[0]._;\r\n      }\r\n      callback(null, profile, true);\r\n    });\r\n  } else {\r\n    return callback(new Error('Unknown SAML request message'));\r\n  }\r\n}\r\n\r\n\r\nfunction processValidlySignedSamlLogout(self: SAML, doc: XMLOutput, dom: Document, callback: (err: Error | null, profile?: Profile | null | undefined, loggedOut?: boolean | undefined) => void) {\r\n  const response = doc.LogoutResponse;\r\n  const request = doc.LogoutRequest;\r\n\r\n  if (response){\r\n    return callback(null, null, true);\r\n  } else if (request) {\r\n    processValidlySignedPostRequest(self, doc, dom, callback);\r\n  } else {\r\n    throw new Error('Unknown SAML response message');\r\n  }\r\n}\r\n\r\nfunction callBackWithNameID(nameid: Node, callback: (err: Error | null, value: NameID) => void) {\r\n  const format = xmlCrypto.xpath(nameid, \"@Format\") as Node[];\r\n  return callback(null, {\r\n    value: nameid.textContent,\r\n    format: format && format[0] && format[0].nodeValue\r\n  });\r\n}\r\n\r\nclass SAML {\r\n  options: SAMLOptions;\r\n  cacheProvider: InMemoryCacheProvider;\r\n\r\n  constructor(options: Partial<SAMLOptions>) {\r\n    this.options = this.initialize(options);\r\n    this.cacheProvider = this.options.cacheProvider;\r\n  }\r\n  initialize(options: Partial<SAMLOptions>): SAMLOptions {\r\n    if (!options) {\r\n      options = {};\r\n    }\r\n\r\n    if (options.privateCert) {\r\n      console.warn(\"options.privateCert has been deprecated; use options.privateKey instead.\");\r\n\r\n      if (!options.privateKey) {\r\n        options.privateKey = options.privateCert;\r\n      }\r\n    }\r\n\r\n    if (Object.prototype.hasOwnProperty.call(options, 'cert') && !options.cert) {\r\n      throw new Error('Invalid property: cert must not be empty');\r\n    }\r\n\r\n    if (!options.path) {\r\n      options.path = '/saml/consume';\r\n    }\r\n\r\n    if (!options.host) {\r\n      options.host = 'localhost';\r\n    }\r\n\r\n    if (!options.issuer) {\r\n      options.issuer = 'onelogin_saml';\r\n    }\r\n\r\n    if (options.identifierFormat === undefined) {\r\n      options.identifierFormat = \"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\";\r\n    }\r\n\r\n    if (options.authnContext === undefined) {\r\n      options.authnContext = \"urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\";\r\n    }\r\n\r\n    if (!Array.isArray(options.authnContext)) {\r\n      options.authnContext = [options.authnContext];\r\n    }\r\n\r\n    if (!options.acceptedClockSkewMs) {\r\n      // default to no skew\r\n      options.acceptedClockSkewMs = 0;\r\n    }\r\n\r\n    if(!options.validateInResponseTo){\r\n      options.validateInResponseTo = false;\r\n    }\r\n\r\n    if(!options.requestIdExpirationPeriodMs){\r\n      options.requestIdExpirationPeriodMs = 28800000;  // 8 hours\r\n    }\r\n\r\n    if(!options.cacheProvider){\r\n      options.cacheProvider = new InMemoryCacheProvider(\r\n          {keyExpirationPeriodMs: options.requestIdExpirationPeriodMs });\r\n    }\r\n\r\n    if (!options.logoutUrl) {\r\n      // Default to Entry Point\r\n      options.logoutUrl = options.entryPoint || '';\r\n    }\r\n\r\n    // sha1, sha256, or sha512\r\n    if (!options.signatureAlgorithm) {\r\n      options.signatureAlgorithm = 'sha1';\r\n    }\r\n\r\n    /**\r\n     * List of possible values:\r\n     * - exact : Assertion context must exactly match a context in the list\r\n     * - minimum:  Assertion context must be at least as strong as a context in the list\r\n     * - maximum:  Assertion context must be no stronger than a context in the list\r\n     * - better:  Assertion context must be stronger than all contexts in the list\r\n     */\r\n    if (!options.RACComparison || ['exact','minimum','maximum','better'].indexOf(options.RACComparison) === -1){\r\n      options.RACComparison = 'exact';\r\n    }\r\n\r\n    options.authnRequestBinding = options.authnRequestBinding || 'HTTP-Redirect';\r\n\r\n    return options as SAMLOptions;\r\n  }\r\n\r\n  getProtocol(req: Request | {headers?: undefined, protocol?: undefined}) {\r\n    return this.options.protocol || (req.protocol || 'http').concat('://');\r\n  }\r\n\r\n  getCallbackUrl(req: Request | {headers?: undefined, protocol?: undefined}) {\r\n    // Post-auth destination\r\n    if (this.options.callbackUrl) {\r\n      return this.options.callbackUrl;\r\n    } else {\r\n      let host;\r\n      if (req.headers) {\r\n        host = req.headers.host;\r\n      } else {\r\n        host = this.options.host;\r\n      }\r\n      return this.getProtocol(req) + host + this.options.path;\r\n    }\r\n  }\r\n\r\n  generateUniqueID () {\r\n    return crypto.randomBytes(10).toString('hex');\r\n  }\r\n\r\n  generateInstant() {\r\n    return new Date().toISOString();\r\n  }\r\n\r\n  signRequest(samlMessage: querystring.ParsedUrlQueryInput) {\r\n    const samlMessageToSign: querystring.ParsedUrlQueryInput = {};\r\n    samlMessage.SigAlg = algorithms.getSigningAlgorithm(this.options.signatureAlgorithm);\r\n    const signer = algorithms.getSigner(this.options.signatureAlgorithm);\r\n    if (samlMessage.SAMLRequest) {\r\n      samlMessageToSign.SAMLRequest = samlMessage.SAMLRequest;\r\n    }\r\n    if (samlMessage.SAMLResponse) {\r\n      samlMessageToSign.SAMLResponse = samlMessage.SAMLResponse;\r\n    }\r\n    if (samlMessage.RelayState) {\r\n      samlMessageToSign.RelayState = samlMessage.RelayState;\r\n    }\r\n    if (samlMessage.SigAlg) {\r\n      samlMessageToSign.SigAlg = samlMessage.SigAlg;\r\n    }\r\n    signer.update(querystring.stringify(samlMessageToSign));\r\n    samlMessage.Signature = signer.sign(this.keyToPEM(this.options.privateKey), 'base64');\r\n  }\r\n\r\n  generateAuthorizeRequest(req: Request, isPassive: boolean, isHttpPostBinding: boolean, callback: (err: Error | null, request?: string) => void) {\r\n    const id = \"_\" + this.generateUniqueID();\r\n    const instant = this.generateInstant();\r\n    const forceAuthn = this.options.forceAuthn || false;\r\n\r\n    (async () => {\r\n      if(this.options.validateInResponseTo) {\r\n        return util.promisify(this.cacheProvider.save).bind(this.cacheProvider)(id, instant);\r\n      } else {\r\n        return;\r\n      }\r\n    })()\r\n    .then(() => {\r\n      const request: AuthorizeRequestXML = {\r\n        'samlp:AuthnRequest': {\r\n          '@xmlns:samlp': 'urn:oasis:names:tc:SAML:2.0:protocol',\r\n          '@ID': id,\r\n          '@Version': '2.0',\r\n          '@IssueInstant': instant,\r\n          '@ProtocolBinding': 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST',\r\n          '@Destination': this.options.entryPoint,\r\n          'saml:Issuer' : {\r\n            '@xmlns:saml' : 'urn:oasis:names:tc:SAML:2.0:assertion',\r\n            '#text': this.options.issuer\r\n          }\r\n        }\r\n      };\r\n\r\n      if (isPassive)\r\n        request['samlp:AuthnRequest']['@IsPassive'] = true;\r\n\r\n      if (forceAuthn) {\r\n        request['samlp:AuthnRequest']['@ForceAuthn'] = true;\r\n      }\r\n\r\n      if (!this.options.disableRequestACSUrl) {\r\n        request['samlp:AuthnRequest']['@AssertionConsumerServiceURL'] = this.getCallbackUrl(req);\r\n      }\r\n\r\n      if (this.options.identifierFormat) {\r\n        request['samlp:AuthnRequest']['samlp:NameIDPolicy'] = {\r\n          '@xmlns:samlp': 'urn:oasis:names:tc:SAML:2.0:protocol',\r\n          '@Format': this.options.identifierFormat,\r\n          '@AllowCreate': 'true'\r\n        };\r\n      }\r\n\r\n      if (!this.options.disableRequestedAuthnContext) {\r\n        const authnContextClassRefs: XMLInput[] = [];\r\n        (this.options.authnContext as string[]).forEach(function(value) {\r\n          authnContextClassRefs.push({\r\n              '@xmlns:saml': 'urn:oasis:names:tc:SAML:2.0:assertion',\r\n              '#text': value\r\n          });\r\n        });\r\n\r\n        request['samlp:AuthnRequest']['samlp:RequestedAuthnContext'] = {\r\n          '@xmlns:samlp': 'urn:oasis:names:tc:SAML:2.0:protocol',\r\n          '@Comparison': this.options.RACComparison,\r\n          'saml:AuthnContextClassRef': authnContextClassRefs\r\n        };\r\n      }\r\n\r\n      if (this.options.attributeConsumingServiceIndex != null) {\r\n        request['samlp:AuthnRequest']['@AttributeConsumingServiceIndex'] = this.options.attributeConsumingServiceIndex;\r\n      }\r\n\r\n      if (this.options.providerName) {\r\n        request['samlp:AuthnRequest']['@ProviderName'] = this.options.providerName;\r\n      }\r\n\r\n      if (this.options.scoping) {\r\n        const scoping: XMLInput = {\r\n          '@xmlns:samlp': 'urn:oasis:names:tc:SAML:2.0:protocol',\r\n        };\r\n\r\n        if (typeof this.options.scoping.proxyCount === 'number') {\r\n          scoping['@ProxyCount'] = this.options.scoping.proxyCount;\r\n        }\r\n\r\n        if (this.options.scoping.idpList) {\r\n          scoping['samlp:IDPList'] = this.options.scoping.idpList.map((idpListItem: SamlIDPListConfig) => {\r\n            const formattedIdpListItem: XMLInput = {\r\n              '@xmlns:samlp': 'urn:oasis:names:tc:SAML:2.0:protocol',\r\n            };\r\n\r\n            if (idpListItem.entries) {\r\n              formattedIdpListItem['samlp:IDPEntry'] = idpListItem.entries.map((entry: SamlIDPEntryConfig) => {\r\n                const formattedEntry: XMLInput = {\r\n                  '@xmlns:samlp': 'urn:oasis:names:tc:SAML:2.0:protocol',\r\n                };\r\n\r\n                formattedEntry['@ProviderID'] = entry.providerId;\r\n\r\n                if (entry.name) {\r\n                  formattedEntry['@Name'] = entry.name;\r\n                }\r\n\r\n                if (entry.loc) {\r\n                  formattedEntry['@Loc'] = entry.loc;\r\n                }\r\n\r\n                return formattedEntry;\r\n              });\r\n            }\r\n\r\n            if (idpListItem.getComplete) {\r\n              formattedIdpListItem['samlp:GetComplete'] = idpListItem.getComplete;\r\n            }\r\n\r\n            return formattedIdpListItem;\r\n          });\r\n        }\r\n\r\n        if (this.options.scoping.requesterId) {\r\n          scoping['samlp:RequesterID'] = this.options.scoping.requesterId;\r\n        }\r\n\r\n        request['samlp:AuthnRequest']['samlp:Scoping'] = scoping;\r\n      }\r\n\r\n      let stringRequest = xmlbuilder.create(request as unknown as Record<string, any>).end();\r\n      if (isHttpPostBinding && this.options.privateKey) {\r\n        stringRequest = signAuthnRequestPost(stringRequest, this.options);\r\n      }\r\n      callback(null, stringRequest);\r\n    })\r\n    .catch(function(err){\r\n      callback(err);\r\n    });\r\n  }\r\n\r\n  generateLogoutRequest(req: RequestWithUser) {\r\n    const id = \"_\" + this.generateUniqueID();\r\n    const instant = this.generateInstant();\r\n\r\n    const request = {\r\n      'samlp:LogoutRequest' : {\r\n        '@xmlns:samlp': 'urn:oasis:names:tc:SAML:2.0:protocol',\r\n        '@xmlns:saml': 'urn:oasis:names:tc:SAML:2.0:assertion',\r\n        '@ID': id,\r\n        '@Version': '2.0',\r\n        '@IssueInstant': instant,\r\n        '@Destination': this.options.logoutUrl,\r\n        'saml:Issuer' : {\r\n          '@xmlns:saml': 'urn:oasis:names:tc:SAML:2.0:assertion',\r\n          '#text': this.options.issuer\r\n        },\r\n        'saml:NameID' : {\r\n          '@Format': req.user!.nameIDFormat,\r\n          '#text': req.user!.nameID\r\n        }\r\n      }\r\n    } as LogoutRequestXML;\r\n\r\n    if (req.user!.nameQualifier != null) {\r\n      request['samlp:LogoutRequest']['saml:NameID']['@NameQualifier'] = req.user!.nameQualifier;\r\n    }\r\n\r\n    if (req.user!.spNameQualifier != null) {\r\n      request['samlp:LogoutRequest']['saml:NameID']['@SPNameQualifier'] = req.user!.spNameQualifier;\r\n    }\r\n\r\n    if (req.user!.sessionIndex) {\r\n      request['samlp:LogoutRequest']['saml2p:SessionIndex'] = {\r\n        '@xmlns:saml2p': 'urn:oasis:names:tc:SAML:2.0:protocol',\r\n        '#text': req.user!.sessionIndex\r\n      };\r\n    }\r\n\r\n    return util.promisify(this.cacheProvider.save).bind(this.cacheProvider)(id, instant)\r\n      .then(function() {\r\n        return xmlbuilder.create(request as unknown as Record<string, any>).end();\r\n      });\r\n  }\r\n\r\n  generateLogoutResponse(req: Request, logoutRequest: Profile) {\r\n    const id = \"_\" + this.generateUniqueID();\r\n    const instant = this.generateInstant();\r\n\r\n    const request = {\r\n      'samlp:LogoutResponse' : {\r\n        '@xmlns:samlp': 'urn:oasis:names:tc:SAML:2.0:protocol',\r\n        '@xmlns:saml': 'urn:oasis:names:tc:SAML:2.0:assertion',\r\n        '@ID': id,\r\n        '@Version': '2.0',\r\n        '@IssueInstant': instant,\r\n        '@Destination': this.options.logoutUrl,\r\n        '@InResponseTo': logoutRequest.ID,\r\n        'saml:Issuer' : {\r\n          '#text': this.options.issuer\r\n        },\r\n        'samlp:Status': {\r\n          'samlp:StatusCode': {\r\n            '@Value': 'urn:oasis:names:tc:SAML:2.0:status:Success'\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    return xmlbuilder.create(request).end();\r\n  }\r\n\r\n  requestToUrl(request: string | null | undefined, response: string | null, operation: string, additionalParameters: querystring.ParsedUrlQuery, callback: (err: Error | null, url?: string | null | undefined) => void) {\r\n\r\n    const requestToUrlHelper = (err: Error | null, buffer: Buffer) => {\r\n      if (err) {\r\n        return callback(err);\r\n      }\r\n\r\n      const base64 = buffer.toString('base64');\r\n      let target = url.parse(this.options.entryPoint, true);\r\n\r\n      if (operation === 'logout') {\r\n        if (this.options.logoutUrl) {\r\n          target = url.parse(this.options.logoutUrl, true);\r\n        }\r\n      } else if (operation !== 'authorize') {\r\n          return callback(new Error(\"Unknown operation: \"+operation));\r\n      }\r\n\r\n      const samlMessage: querystring.ParsedUrlQuery = request ? {\r\n        SAMLRequest: base64\r\n      } : {\r\n        SAMLResponse: base64\r\n      };\r\n      Object.keys(additionalParameters).forEach(k => {\r\n        samlMessage[k] = additionalParameters[k];\r\n      });\r\n      if (this.options.privateKey) {\r\n        try {\r\n          if (!this.options.entryPoint) {\r\n            throw new Error('\"entryPoint\" config parameter is required for signed messages');\r\n          }\r\n\r\n          // sets .SigAlg and .Signature\r\n          this.signRequest(samlMessage);\r\n\r\n        } catch (ex) {\r\n          return callback(ex);\r\n        }\r\n      }\r\n      Object.keys(samlMessage).forEach(k => {\r\n        target.query[k] = samlMessage[k];\r\n      });\r\n\r\n      // Delete 'search' to for pulling query string from 'query'\r\n      // https://nodejs.org/api/url.html#url_url_format_urlobj\r\n      target.search = null;\r\n\r\n      callback(null, url.format(target));\r\n    };\r\n\r\n    if (this.options.skipRequestCompression) {\r\n      requestToUrlHelper(null, Buffer.from((request || response)!, 'utf8'));\r\n    }\r\n    else {\r\n      zlib.deflateRaw((request || response)!, requestToUrlHelper);\r\n    }\r\n  }\r\n\r\n  getAdditionalParams(req: Request, operation: string, overrideParams?: querystring.ParsedUrlQuery) {\r\n    const additionalParams: querystring.ParsedUrlQuery = {};\r\n\r\n    const RelayState = req.query && req.query.RelayState || req.body && req.body.RelayState;\r\n    if (RelayState) {\r\n      additionalParams.RelayState = RelayState;\r\n    }\r\n\r\n    const optionsAdditionalParams = this.options.additionalParams || {};\r\n    Object.keys(optionsAdditionalParams).forEach(function(k) {\r\n      additionalParams[k] = optionsAdditionalParams[k];\r\n    });\r\n\r\n    let optionsAdditionalParamsForThisOperation: Record<string, string> = {};\r\n    if (operation == \"authorize\") {\r\n      optionsAdditionalParamsForThisOperation = this.options.additionalAuthorizeParams || {};\r\n    }\r\n    if (operation == \"logout\") {\r\n      optionsAdditionalParamsForThisOperation = this.options.additionalLogoutParams || {};\r\n    }\r\n\r\n    Object.keys(optionsAdditionalParamsForThisOperation).forEach(function(k) {\r\n      additionalParams[k] = optionsAdditionalParamsForThisOperation[k];\r\n    });\r\n\r\n    overrideParams = overrideParams || {};\r\n    Object.keys(overrideParams).forEach(function(k) {\r\n      additionalParams[k] = overrideParams![k];\r\n    });\r\n\r\n    return additionalParams;\r\n  }\r\n\r\n  getAuthorizeUrl(req: Request, options: AuthenticateOptions & AuthorizeOptions, callback: (err: Error | null, url?: string | null) => void) {\r\n    this.generateAuthorizeRequest(req, this.options.passive, false, (err: Error | null, request) => {\r\n      if (err)\r\n        return callback(err);\r\n      const operation = 'authorize';\r\n      const overrideParams = options ? options.additionalParams || {} : {};\r\n      this.requestToUrl(request, null, operation, this.getAdditionalParams(req, operation, overrideParams), callback);\r\n    });\r\n  }\r\n\r\n  getAuthorizeForm(req: Request, callback: (err: Error | null, data?: unknown) => void) {\r\n    // The quoteattr() function is used in a context, where the result will not be evaluated by javascript\r\n    // but must be interpreted by an XML or HTML parser, and it must absolutely avoid breaking the syntax\r\n    // of an element attribute.\r\n    const quoteattr = function(s: string | number | boolean | undefined | null | readonly string[] | readonly number[] | readonly boolean[], preserveCR?: boolean) {\r\n      const preserveCRChar = preserveCR ? '&#13;' : '\\n';\r\n      return ('' + s) // Forces the conversion to string.\r\n        .replace(/&/g, '&amp;') // This MUST be the 1st replacement.\r\n        .replace(/'/g, '&apos;') // The 4 other predefined entities, required.\r\n        .replace(/\"/g, '&quot;')\r\n        .replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;')\r\n        // Add other replacements here for HTML only\r\n        // Or for XML, only if the named entities are defined in its DTD.\r\n        .replace(/\\r\\n/g, preserveCRChar) // Must be before the next replacement.\r\n        .replace(/[\\r\\n]/g, preserveCRChar);\r\n    };\r\n\r\n    const getAuthorizeFormHelper = (err: Error | null, buffer?: Buffer) => {\r\n      if (err) {\r\n        return callback(err);\r\n      }\r\n\r\n      const operation = 'authorize';\r\n      const additionalParameters = this.getAdditionalParams(req, operation);\r\n      const samlMessage: querystring.ParsedUrlQueryInput = {\r\n        SAMLRequest: buffer!.toString('base64')\r\n      };\r\n\r\n      Object.keys(additionalParameters).forEach(k => {\r\n        samlMessage[k] = additionalParameters[k] || '';\r\n      });\r\n\r\n      const formInputs = Object.keys(samlMessage).map(k => {\r\n        return '<input type=\"hidden\" name=\"' + k + '\" value=\"' + quoteattr(samlMessage[k]) + '\" />';\r\n      }).join('\\r\\n');\r\n\r\n      callback(null, [\r\n        '<!DOCTYPE html>',\r\n        '<html>',\r\n        '<head>',\r\n        '<meta charset=\"utf-8\">',\r\n        '<meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">',\r\n        '</head>',\r\n        '<body onload=\"document.forms[0].submit()\">',\r\n        '<noscript>',\r\n        '<p><strong>Note:</strong> Since your browser does not support JavaScript, you must press the button below once to proceed.</p>',\r\n        '</noscript>',\r\n        '<form method=\"post\" action=\"' + encodeURI(this.options.entryPoint) + '\">',\r\n        formInputs,\r\n        '<input type=\"submit\" value=\"Submit\" />',\r\n        '</form>',\r\n        '<script>document.forms[0].style.display=\"none\";</script>', // Hide the form if JavaScript is enabled\r\n        '</body>',\r\n        '</html>'\r\n      ].join('\\r\\n'));\r\n    };\r\n\r\n    this.generateAuthorizeRequest(req, this.options.passive, true, (err: Error | null, request?: string) => {\r\n      if (err) {\r\n        return callback(err);\r\n      }\r\n\r\n      if (this.options.skipRequestCompression) {\r\n        getAuthorizeFormHelper(null, Buffer.from(request!, 'utf8'));\r\n      } else {\r\n        zlib.deflateRaw(request!, getAuthorizeFormHelper);\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  getLogoutUrl(req: RequestWithUser, options: AuthenticateOptions & AuthorizeOptions, callback: (err: Error | null, url?: string | null) => void) {\r\n    return this.generateLogoutRequest(req)\r\n      .then(request => {\r\n        const operation = 'logout';\r\n        const overrideParams = options ? options.additionalParams || {} : {};\r\n        return this.requestToUrl(request, null, operation, this.getAdditionalParams(req, operation, overrideParams), callback);\r\n      });\r\n  }\r\n\r\n  getLogoutResponseUrl(req: RequestWithUser, options: AuthenticateOptions & AuthorizeOptions, callback: (err: Error | null, url?: string | null) => void) {\r\n    const response = this.generateLogoutResponse(req, req.samlLogoutRequest);\r\n    const operation = 'logout';\r\n    const overrideParams = options ? options.additionalParams || {} : {};\r\n    this.requestToUrl(null, response, operation, this.getAdditionalParams(req, operation, overrideParams), callback);\r\n  }\r\n\r\n  certToPEM(cert: string): string {\r\n    cert = cert.match(/.{1,64}/g)!.join('\\n');\r\n\r\n    if (cert.indexOf('-BEGIN CERTIFICATE-') === -1)\r\n      cert = \"-----BEGIN CERTIFICATE-----\\n\" + cert;\r\n    if (cert.indexOf('-END CERTIFICATE-') === -1)\r\n      cert = cert + \"\\n-----END CERTIFICATE-----\\n\";\r\n\r\n    return cert;\r\n  }\r\n\r\n  certsToCheck(): Promise<undefined | string[]> {\r\n    if (!this.options.cert) {\r\n      return Promise.resolve(undefined);\r\n    }\r\n    if (typeof(this.options.cert) === 'function') {\r\n      return util.promisify(this.options.cert as CertCallback)()\r\n      .then((certs) => {\r\n        if (!Array.isArray(certs)) {\r\n          certs = [certs as string];\r\n        }\r\n        return Promise.resolve(certs as string[]);\r\n      });\r\n    }\r\n    let certs = this.options.cert;\r\n    if (!Array.isArray(certs)) {\r\n      certs = [certs];\r\n    }\r\n    return Promise.resolve(certs);\r\n  }\r\n\r\n  // This function checks that the |currentNode| in the |fullXml| document contains exactly 1 valid\r\n  //   signature of the |currentNode|.\r\n  //\r\n  // See https://github.com/bergie/passport-saml/issues/19 for references to some of the attack\r\n  //   vectors against SAML signature verification.\r\n  validateSignature(fullXml: string, currentNode: HTMLElement, certs: string[]) {\r\n    const xpathSigQuery = \".//*[\" +\r\n                        \"local-name(.)='Signature' and \" +\r\n                        \"namespace-uri(.)='http://www.w3.org/2000/09/xmldsig#' and \" +\r\n                        \"descendant::*[local-name(.)='Reference' and @URI='#\"+currentNode.getAttribute('ID')+\"']\" +\r\n                        \"]\";\r\n    const signatures = xmlCrypto.xpath(currentNode, xpathSigQuery);\r\n    // This function is expecting to validate exactly one signature, so if we find more or fewer\r\n    //   than that, reject.\r\n    if (signatures.length != 1) {\r\n      return false;\r\n    }\r\n\r\n    const signature = signatures[0];\r\n    return certs.some(certToCheck => {\r\n      return this.validateSignatureForCert(signature as string, certToCheck, fullXml, currentNode);\r\n    });\r\n  }\r\n\r\n// This function checks that the |signature| is signed with a given |cert|.\r\n  validateSignatureForCert(signature: string | Node, cert: string, fullXml: string, currentNode: HTMLElement) {\r\n    const sig = new xmlCrypto.SignedXml();\r\n    sig.keyInfoProvider = {\r\n      file: '',\r\n      getKeyInfo: key => \"<X509Data></X509Data>\",\r\n      getKey: keyInfo => Buffer.from(this.certToPEM(cert)),\r\n    };\r\n    signature = this.normalizeNewlines(signature.toString());\r\n    sig.loadSignature(signature);\r\n    // We expect each signature to contain exactly one reference to the top level of the xml we\r\n    //   are validating, so if we see anything else, reject.\r\n    if (sig.references.length != 1 )\r\n      return false;\r\n    const refUri = sig.references[0].uri!;\r\n    const refId = (refUri[0] === '#') ? refUri.substring(1) : refUri;\r\n    // If we can't find the reference at the top level, reject\r\n    const idAttribute = currentNode.getAttribute('ID') ? 'ID' : 'Id';\r\n    if (currentNode.getAttribute(idAttribute) != refId)\r\n      return false;\r\n    // If we find any extra referenced nodes, reject.  (xml-crypto only verifies one digest, so\r\n    //   multiple candidate references is bad news)\r\n    const totalReferencedNodes = xmlCrypto.xpath(currentNode.ownerDocument,\r\n                                    \"//*[@\" + idAttribute + \"='\" + refId + \"']\");\r\n\r\n    if (totalReferencedNodes.length > 1) {\r\n      return false;\r\n    }\r\n    fullXml = this.normalizeNewlines(fullXml);\r\n    return sig.checkSignature(fullXml);\r\n  }\r\n\r\n  validatePostResponse(container: Record<string, string>, callback: (err: Error | null, profile?: Profile | null, loggedOut?: boolean) => void) {\r\n    let xml: string, doc: Document, inResponseTo: string | null;\r\n\r\n    (async() => {\r\n      xml = Buffer.from(container.SAMLResponse, 'base64').toString('utf8');\r\n      doc = new xmldom.DOMParser({\r\n      }).parseFromString(xml);\r\n\r\n      if (!Object.prototype.hasOwnProperty.call(doc, 'documentElement'))\r\n        throw new Error('SAMLResponse is not valid base64-encoded XML');\r\n\r\n      const inResponseToNodes = xmlCrypto.xpath(doc, \"/*[local-name()='Response']/@InResponseTo\") as Attr[];\r\n\r\n      if (inResponseToNodes) {\r\n        inResponseTo = inResponseToNodes.length ? inResponseToNodes[0].nodeValue : null;\r\n\r\n        return this.validateInResponseTo(inResponseTo);\r\n      }\r\n    })()\r\n    .then(() => this.certsToCheck())\r\n    .then(certs => {\r\n      // Check if this document has a valid top-level signature\r\n      let validSignature = false;\r\n      if (this.options.cert && this.validateSignature(xml, doc.documentElement, certs!)) {\r\n        validSignature = true;\r\n      }\r\n\r\n      const assertions = xmlCrypto.xpath(doc, \"/*[local-name()='Response']/*[local-name()='Assertion']\") as HTMLElement[];\r\n      const encryptedAssertions = xmlCrypto.xpath(doc,\r\n                                      \"/*[local-name()='Response']/*[local-name()='EncryptedAssertion']\");\r\n\r\n      if (assertions.length + encryptedAssertions.length > 1) {\r\n        // There's no reason I know of that we want to handle multiple assertions, and it seems like a\r\n        //   potential risk vector for signature scope issues, so treat this as an invalid signature\r\n        throw new Error('Invalid signature: multiple assertions');\r\n      }\r\n\r\n      if (assertions.length == 1) {\r\n        if (this.options.cert &&\r\n            !validSignature &&\r\n              !this.validateSignature(xml, assertions[0], certs!)) {\r\n          throw new Error('Invalid signature');\r\n        }\r\n        return this.processValidlySignedAssertion(assertions[0].toString(), xml, inResponseTo!, callback);\r\n      }\r\n\r\n      if (encryptedAssertions.length == 1) {\r\n        if (!this.options.decryptionPvk)\r\n          throw new Error('No decryption key for encrypted SAML response');\r\n\r\n        const encryptedAssertionXml = encryptedAssertions[0].toString();\r\n\r\n        const xmlencOptions = { key: this.options.decryptionPvk };\r\n        return util.promisify(xmlenc.decrypt).bind(xmlenc)(encryptedAssertionXml, xmlencOptions)\r\n        .then((decryptedXml: string) => {\r\n          const decryptedDoc = new xmldom.DOMParser().parseFromString(decryptedXml);\r\n          const decryptedAssertions = xmlCrypto.xpath(decryptedDoc, \"/*[local-name()='Assertion']\") as HTMLElement[];\r\n          if (decryptedAssertions.length != 1)\r\n            throw new Error('Invalid EncryptedAssertion content');\r\n\r\n          if (this.options.cert &&\r\n              !validSignature &&\r\n                !this.validateSignature(decryptedXml, decryptedAssertions[0], certs!))\r\n            throw new Error('Invalid signature from encrypted assertion');\r\n\r\n          this.processValidlySignedAssertion(decryptedAssertions[0].toString(), xml, inResponseTo!, callback);\r\n        });\r\n      }\r\n\r\n      // If there's no assertion, fall back on xml2js response parsing for the status &\r\n      //   LogoutResponse code.\r\n\r\n      const parserConfig = {\r\n        explicitRoot: true,\r\n        explicitCharkey: true,\r\n        tagNameProcessors: [xml2js.processors.stripPrefix]\r\n      };\r\n      const parser = new xml2js.Parser(parserConfig);\r\n      return parser.parseStringPromise(xml)\r\n      .then(doc => {\r\n        const response = doc.Response;\r\n        if (response) {\r\n          const assertion = response.Assertion;\r\n          if (!assertion) {\r\n            const status = response.Status;\r\n            if (status) {\r\n              const statusCode = status[0].StatusCode;\r\n              if (statusCode && statusCode[0].$.Value === \"urn:oasis:names:tc:SAML:2.0:status:Responder\") {\r\n                const nestedStatusCode = statusCode[0].StatusCode;\r\n                if (nestedStatusCode && nestedStatusCode[0].$.Value === \"urn:oasis:names:tc:SAML:2.0:status:NoPassive\") {\r\n                  if (this.options.cert && !validSignature) {\r\n                    throw new Error('Invalid signature: NoPassive');\r\n                  }\r\n                  return callback(null, null, false);\r\n                }\r\n              }\r\n\r\n              // Note that we're not requiring a valid signature before this logic -- since we are\r\n              //   throwing an error in any case, and some providers don't sign error results,\r\n              //   let's go ahead and give the potentially more helpful error.\r\n              if (statusCode && statusCode[0].$.Value) {\r\n                const msgType = statusCode[0].$.Value.match(/[^:]*$/)[0];\r\n                if (msgType != 'Success') {\r\n                    let msg = 'unspecified';\r\n                    if (status[0].StatusMessage) {\r\n                      msg = status[0].StatusMessage[0]._;\r\n                    } else if (statusCode[0].StatusCode) {\r\n                      msg = statusCode[0].StatusCode[0].$.Value.match(/[^:]*$/)[0];\r\n                    }\r\n                    const error = new Error('SAML provider returned ' + msgType + ' error: ' + msg);\r\n                    const builderOpts = {\r\n                      rootName: 'Status',\r\n                      headless: true\r\n                    };\r\n                    // @ts-expect-error adding extra attr to default Error object\r\n                    error.statusXml = new xml2js.Builder(builderOpts).buildObject(status[0]);\r\n                    return Promise.reject(error);\r\n                  }\r\n                }\r\n              }\r\n              throw new Error('Missing SAML assertion');\r\n            }\r\n          } else {\r\n            if (this.options.cert && !validSignature) {\r\n              throw new Error('Invalid signature: No response found');\r\n            }\r\n            const logoutResponse = doc.LogoutResponse;\r\n            if (logoutResponse){\r\n              return callback(null, null, true);\r\n            } else {\r\n              throw new Error('Unknown SAML response message');\r\n            }\r\n          }\r\n        });\r\n    })\r\n    .catch(err => {\r\n      debug('validatePostResponse resulted in an error: %s', err);\r\n      if (this.options.validateInResponseTo) {\r\n        util.promisify(this.cacheProvider.remove).bind(this.cacheProvider)(inResponseTo!)\r\n        .then(function() {\r\n          callback(err);\r\n        });\r\n      } else {\r\n        callback(err);\r\n      }\r\n    });\r\n  }\r\n\r\n  validateInResponseTo(inResponseTo: string | null) {\r\n    if (this.options.validateInResponseTo) {\r\n      if (inResponseTo) {\r\n        return util.promisify(this.cacheProvider.get).bind(this.cacheProvider)(inResponseTo)\r\n          .then(result => {\r\n            if (!result)\r\n              throw new Error('InResponseTo is not valid');\r\n            return Promise.resolve();\r\n          });\r\n      } else {\r\n        throw new Error('InResponseTo is missing from response');\r\n      }\r\n    } else {\r\n      return Promise.resolve();\r\n    }\r\n  }\r\n\r\n  validateRedirect(container: ParsedQs, originalQuery: string | null, callback: (err: Error | null, profile?: Profile | null, loggedOut?: boolean) => void) {\r\n    const samlMessageType = container.SAMLRequest ? 'SAMLRequest' : 'SAMLResponse';\r\n\r\n    const data = Buffer.from(container[samlMessageType] as string, \"base64\");\r\n    zlib.inflateRaw(data, (err, inflated) => {\r\n      if (err) {\r\n        return callback(err);\r\n      }\r\n\r\n      const dom = new xmldom.DOMParser().parseFromString(inflated.toString());\r\n      const parserConfig = {\r\n        explicitRoot: true,\r\n        explicitCharkey: true,\r\n        tagNameProcessors: [xml2js.processors.stripPrefix]\r\n      };\r\n      const parser = new xml2js.Parser(parserConfig);\r\n      parser.parseString(inflated, (err: Error | null, doc: XMLOutput) => {\r\n        if (err) {\r\n          return callback(err);\r\n        }\r\n\r\n        (async () => {\r\n          return samlMessageType === 'SAMLResponse' ?\r\n            this.verifyLogoutResponse(doc) : this.verifyLogoutRequest(doc);\r\n        })()\r\n        .then(() => this.hasValidSignatureForRedirect(container, originalQuery))\r\n        .then(() => processValidlySignedSamlLogout(this, doc, dom, callback))\r\n        .catch(err => callback(err));\r\n      });\r\n    });\r\n  }\r\n\r\n  hasValidSignatureForRedirect(container: ParsedQs, originalQuery: string | null): Promise<boolean | void> {\r\n    const tokens = originalQuery!.split('&');\r\n    const getParam = (key: string) => {\r\n      const exists = tokens.filter(t => { return new RegExp(key).test(t); });\r\n      return exists[0];\r\n    };\r\n\r\n    if (container.Signature && this.options.cert) {\r\n      let urlString = getParam('SAMLRequest') || getParam('SAMLResponse');\r\n\r\n      if (getParam('RelayState')) {\r\n        urlString += '&' + getParam('RelayState');\r\n      }\r\n\r\n      urlString += '&' + getParam('SigAlg');\r\n\r\n      return this.certsToCheck()\r\n        .then(certs => {\r\n          const hasValidQuerySignature = certs!.some(cert => {\r\n            return this.validateSignatureForRedirect(\r\n              urlString, container.Signature as string, container.SigAlg as string, cert\r\n            );\r\n          });\r\n\r\n          if (!hasValidQuerySignature) {\r\n            throw new Error('Invalid signature');\r\n          }\r\n        });\r\n    } else {\r\n      return Promise.resolve(true);\r\n    }\r\n  }\r\n\r\n  validateSignatureForRedirect(urlString: crypto.BinaryLike, signature: string, alg: string, cert: string) {\r\n    // See if we support a matching algorithm, case-insensitive. Otherwise, throw error.\r\n    function hasMatch (ourAlgo: string) {\r\n      // The incoming algorithm is forwarded as a URL.\r\n      // We trim everything before the last # get something we can compare to the Node.js list\r\n      const algFromURI = alg.toLowerCase().replace(/.*#(.*)$/,'$1');\r\n      return ourAlgo.toLowerCase() === algFromURI;\r\n    }\r\n    const i = crypto.getHashes().findIndex(hasMatch);\r\n    let matchingAlgo;\r\n    if (i > -1) {\r\n      matchingAlgo = crypto.getHashes()[i];\r\n    }\r\n    else {\r\n      throw new Error(alg + ' is not supported');\r\n    }\r\n\r\n    const verifier = crypto.createVerify(matchingAlgo);\r\n    verifier.update(urlString);\r\n\r\n    return verifier.verify(this.certToPEM(cert), signature, 'base64');\r\n  }\r\n\r\n  verifyLogoutRequest(doc: XMLOutput) {\r\n    this.verifyIssuer(doc.LogoutRequest);\r\n    const nowMs = new Date().getTime();\r\n    const conditions = doc.LogoutRequest.$;\r\n    const conErr = this.checkTimestampsValidityError(\r\n      nowMs, conditions.NotBefore, conditions.NotOnOrAfter\r\n    );\r\n    if (conErr) {\r\n      throw conErr;\r\n    }\r\n  }\r\n\r\n  verifyLogoutResponse(doc: XMLOutput) {\r\n    return (async () => {\r\n      const statusCode = doc.LogoutResponse.Status[0].StatusCode[0].$.Value;\r\n      if (statusCode !== \"urn:oasis:names:tc:SAML:2.0:status:Success\")\r\n        throw new Error('Bad status code: ' + statusCode);\r\n\r\n      this.verifyIssuer(doc.LogoutResponse);\r\n      const inResponseTo = doc.LogoutResponse.$.InResponseTo;\r\n      if (inResponseTo) {\r\n        return this.validateInResponseTo(inResponseTo);\r\n      }\r\n\r\n      return Promise.resolve(true);\r\n    })();\r\n  }\r\n\r\n  verifyIssuer(samlMessage: XMLOutput) {\r\n    if(this.options.idpIssuer) {\r\n      const issuer = samlMessage.Issuer;\r\n      if (issuer) {\r\n        if (issuer[0]._ !== this.options.idpIssuer)\r\n          throw new Error('Unknown SAML issuer. Expected: ' + this.options.idpIssuer + ' Received: ' + issuer[0]._);\r\n      } else {\r\n        throw new Error('Missing SAML issuer');\r\n      }\r\n    }\r\n  }\r\n\r\n  processValidlySignedAssertion(xml: xml2js.convertableToString, samlResponseXml: string, inResponseTo: string, callback: (err: Error | null, profile?: Profile | undefined, loggedOut?: boolean | undefined) => void) {\r\n    let msg;\r\n    const parserConfig = {\r\n      explicitRoot: true,\r\n      explicitCharkey: true,\r\n      tagNameProcessors: [xml2js.processors.stripPrefix]\r\n    };\r\n    const nowMs = new Date().getTime();\r\n    const profile = {} as Profile;\r\n    let assertion: XMLOutput;\r\n    let parsedAssertion: XMLOutput;\r\n    const parser = new xml2js.Parser(parserConfig);\r\n    parser.parseStringPromise(xml)\r\n    .then((doc: XMLOutput) => {\r\n      parsedAssertion = doc;\r\n      assertion = doc.Assertion;\r\n\r\n      const issuer = assertion.Issuer;\r\n      if (issuer && issuer[0]._) {\r\n        profile.issuer = issuer[0]._;\r\n      }\r\n\r\n      if (inResponseTo) {\r\n        profile.inResponseTo = inResponseTo;\r\n      }\r\n\r\n      const authnStatement = assertion.AuthnStatement;\r\n      if (authnStatement) {\r\n        if (authnStatement[0].$ && authnStatement[0].$.SessionIndex) {\r\n          profile.sessionIndex = authnStatement[0].$.SessionIndex;\r\n        }\r\n      }\r\n\r\n      const subject = assertion.Subject;\r\n      let subjectConfirmation, confirmData;\r\n      if (subject) {\r\n        const nameID = subject[0].NameID;\r\n        if (nameID && nameID[0]._) {\r\n          profile.nameID = nameID[0]._;\r\n\r\n          if (nameID[0].$ && nameID[0].$.Format) {\r\n            profile.nameIDFormat = nameID[0].$.Format;\r\n            profile.nameQualifier = nameID[0].$.NameQualifier;\r\n            profile.spNameQualifier = nameID[0].$.SPNameQualifier;\r\n          }\r\n        }\r\n\r\n        subjectConfirmation = subject[0].SubjectConfirmation ?\r\n                              subject[0].SubjectConfirmation[0] : null;\r\n        confirmData = subjectConfirmation && subjectConfirmation.SubjectConfirmationData ?\r\n                      subjectConfirmation.SubjectConfirmationData[0] : null;\r\n        if (subject[0].SubjectConfirmation && subject[0].SubjectConfirmation.length > 1) {\r\n          msg = 'Unable to process multiple SubjectConfirmations in SAML assertion';\r\n          throw new Error(msg);\r\n        }\r\n\r\n        if (subjectConfirmation) {\r\n          if (confirmData && confirmData.$) {\r\n            const subjectNotBefore = confirmData.$.NotBefore;\r\n            const subjectNotOnOrAfter = confirmData.$.NotOnOrAfter;\r\n\r\n            const subjErr = this.checkTimestampsValidityError(\r\n                            nowMs, subjectNotBefore, subjectNotOnOrAfter);\r\n            if (subjErr) {\r\n              throw subjErr;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Test to see that if we have a SubjectConfirmation InResponseTo that it matches\r\n      // the 'InResponseTo' attribute set in the Response\r\n      if (this.options.validateInResponseTo) {\r\n        if (subjectConfirmation) {\r\n          if (confirmData && confirmData.$) {\r\n            const subjectInResponseTo = confirmData.$.InResponseTo;\r\n            if (inResponseTo && subjectInResponseTo && subjectInResponseTo != inResponseTo) {\r\n              return util.promisify(this.cacheProvider.remove).bind(this.cacheProvider)(inResponseTo)\r\n                .then(() => {\r\n                  throw new Error('InResponseTo is not valid');\r\n                });\r\n            } else if (subjectInResponseTo) {\r\n              let foundValidInResponseTo = false;\r\n              return util.promisify(this.cacheProvider.get).bind(this.cacheProvider)(subjectInResponseTo)\r\n                .then(result => {\r\n                  if (result) {\r\n                    const createdAt = new Date(result);\r\n                    if (nowMs < createdAt.getTime() + this.options.requestIdExpirationPeriodMs)\r\n                      foundValidInResponseTo = true;\r\n                  }\r\n                  return util.promisify(this.cacheProvider.remove).bind(this.cacheProvider)(inResponseTo);\r\n                })\r\n                .then(() => {\r\n                  if (!foundValidInResponseTo) {\r\n                    throw new Error('InResponseTo is not valid');\r\n                  }\r\n                  return Promise.resolve();\r\n                });\r\n            }\r\n          }\r\n        } else {\r\n          util.promisify(this.cacheProvider.remove).bind(this.cacheProvider)(inResponseTo);\r\n          return Promise.resolve();\r\n        }\r\n      } else {\r\n        return Promise.resolve();\r\n      }\r\n    })\r\n    .then(() => {\r\n      const conditions = assertion.Conditions ? assertion.Conditions[0] : null;\r\n      if (assertion.Conditions && assertion.Conditions.length > 1) {\r\n        msg = 'Unable to process multiple conditions in SAML assertion';\r\n        throw new Error(msg);\r\n      }\r\n      if(conditions && conditions.$) {\r\n        const conErr = this.checkTimestampsValidityError(\r\n                      nowMs, conditions.$.NotBefore, conditions.$.NotOnOrAfter);\r\n        if(conErr)\r\n          throw conErr;\r\n      }\r\n\r\n      if (this.options.audience) {\r\n        const audienceErr = this.checkAudienceValidityError(\r\n                      this.options.audience, conditions.AudienceRestriction);\r\n        if(audienceErr)\r\n          throw audienceErr;\r\n      }\r\n\r\n      const attributeStatement = assertion.AttributeStatement;\r\n      if (attributeStatement) {\r\n        const attributes: XMLOutput[] = [].concat(...attributeStatement.filter((attr: XMLObject) => Array.isArray(attr.Attribute))\r\n                                                    .map((attr: XMLObject) => attr.Attribute));\r\n\r\n        const attrValueMapper = (value: XMLObject) => {\r\n          const hasChildren = Object.keys(value).some((cur)=> { return (cur!=='_' && cur!=='$'); });\r\n          return (hasChildren) ? value : value._;\r\n        };\r\n\r\n        if (attributes) {\r\n          attributes.forEach(attribute => {\r\n          if(!Object.prototype.hasOwnProperty.call(attribute, 'AttributeValue')) {\r\n              // if attributes has no AttributeValue child, continue\r\n              return;\r\n            }\r\n            const value = attribute.AttributeValue;\r\n            if (value.length === 1) {\r\n              profile[attribute.$.Name] = attrValueMapper(value[0]);\r\n            } else {\r\n              profile[attribute.$.Name] = value.map(attrValueMapper);\r\n            }\r\n          });\r\n        }\r\n      }\r\n\r\n      if (!profile.mail && profile['urn:oid:0.9.2342.19200300.100.1.3']) {\r\n        // See https://spaces.internet2.edu/display/InCFederation/Supported+Attribute+Summary\r\n        // for definition of attribute OIDs\r\n        profile.mail = profile['urn:oid:0.9.2342.19200300.100.1.3'];\r\n      }\r\n\r\n      if (!profile.email && profile.mail) {\r\n        profile.email = profile.mail;\r\n      }\r\n\r\n      profile.getAssertionXml = () => xml.toString();\r\n      profile.getAssertion = () => parsedAssertion;\r\n      profile.getSamlResponseXml = () => samlResponseXml;\r\n\r\n      callback(null, profile, false);\r\n    })\r\n    .catch(err => callback(err));\r\n  }\r\n\r\n  checkTimestampsValidityError(nowMs: number, notBefore: string, notOnOrAfter: string) {\r\n    if (this.options.acceptedClockSkewMs == -1)\r\n        return null;\r\n\r\n    if (notBefore) {\r\n      const notBeforeMs = Date.parse(notBefore);\r\n      if (nowMs + this.options.acceptedClockSkewMs < notBeforeMs)\r\n          return new Error('SAML assertion not yet valid');\r\n    }\r\n    if (notOnOrAfter) {\r\n      const notOnOrAfterMs = Date.parse(notOnOrAfter);\r\n      if (nowMs - this.options.acceptedClockSkewMs >= notOnOrAfterMs)\r\n        return new Error('SAML assertion expired');\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  checkAudienceValidityError(expectedAudience: string, audienceRestrictions: AudienceRestrictionXML[]) {\r\n    if (!audienceRestrictions || audienceRestrictions.length < 1) {\r\n      return new Error('SAML assertion has no AudienceRestriction');\r\n    }\r\n    const errors = audienceRestrictions.map((restriction) => {\r\n      if (!restriction.Audience || !restriction.Audience[0] || !restriction.Audience[0]._) {\r\n        return new Error('SAML assertion AudienceRestriction has no Audience value');\r\n      }\r\n      if (restriction.Audience[0]._ !== expectedAudience) {\r\n        return new Error('SAML assertion audience mismatch');\r\n      }\r\n      return null;\r\n    }).filter(result => {\r\n      return result !== null;\r\n    });\r\n    if (errors.length > 0) {\r\n      return errors[0];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  validatePostRequest(container: Record<string, string>, callback: (err: Error | null, profile?: Profile, loggedOut?: boolean) => void) {\r\n    const xml = Buffer.from(container.SAMLRequest, 'base64').toString('utf8');\r\n    const dom = new xmldom.DOMParser().parseFromString(xml);\r\n    const parserConfig = {\r\n      explicitRoot: true,\r\n      explicitCharkey: true,\r\n      tagNameProcessors: [xml2js.processors.stripPrefix]\r\n    };\r\n    const parser = new xml2js.Parser(parserConfig);\r\n    parser.parseString(xml, (err: Error | null, doc: XMLOutput) => {\r\n      if (err) {\r\n        return callback(err);\r\n      }\r\n\r\n      this.certsToCheck()\r\n      .then(certs => {\r\n        // Check if this document has a valid top-level signature\r\n        if (this.options.cert && !this.validateSignature(xml, dom.documentElement, certs!)) {\r\n          return callback(new Error('Invalid signature on documentElement'));\r\n        }\r\n\r\n        processValidlySignedPostRequest(this, doc, dom, callback);\r\n      })\r\n      .catch(err => callback(err));\r\n    });\r\n  }\r\n\r\n  getNameID(self: SAML, doc: Node, callback: (err: Error | null, nameID?: XMLOutput) => void) {\r\n    const nameIds = xmlCrypto.xpath(doc, \"/*[local-name()='LogoutRequest']/*[local-name()='NameID']\") as Node[];\r\n    const encryptedIds = xmlCrypto.xpath(doc,\r\n      \"/*[local-name()='LogoutRequest']/*[local-name()='EncryptedID']\") as Node[];\r\n\r\n    if (nameIds.length + encryptedIds.length > 1) {\r\n      return callback(new Error('Invalid LogoutRequest'));\r\n    }\r\n    if (nameIds.length === 1) {\r\n      return callBackWithNameID(nameIds[0], callback);\r\n    }\r\n    if (encryptedIds.length === 1) {\r\n      if (!self.options.decryptionPvk) {\r\n        return callback(new Error('No decryption key for encrypted SAML response'));\r\n      }\r\n\r\n      const encryptedDatas = xmlCrypto.xpath(encryptedIds[0], \"./*[local-name()='EncryptedData']\");\r\n\r\n      if (encryptedDatas.length !== 1) {\r\n        return callback(new Error('Invalid LogoutRequest'));\r\n      }\r\n      const encryptedDataXml = encryptedDatas[0].toString();\r\n\r\n      const xmlencOptions = { key: self.options.decryptionPvk };\r\n      return util.promisify(xmlenc.decrypt).bind(xmlenc)(encryptedDataXml, xmlencOptions)\r\n        .then(function (decryptedXml: string) {\r\n          const decryptedDoc = new xmldom.DOMParser().parseFromString(decryptedXml);\r\n          const decryptedIds = xmlCrypto.xpath(decryptedDoc, \"/*[local-name()='NameID']\") as Node[];\r\n          if (decryptedIds.length !== 1) {\r\n            return callback(new Error('Invalid EncryptedAssertion content'));\r\n          }\r\n          return callBackWithNameID(decryptedIds[0], callback);\r\n        })\r\n        .catch((err: Error) => {\r\n          callback(err);\r\n        });\r\n    }\r\n    callback(new Error('Missing SAML NameID'));\r\n  }\r\n\r\n  generateServiceProviderMetadata( decryptionCert: string | null, signingCert?: string | null ) {\r\n    const metadata: ServiceMetadataXML = {\r\n      'EntityDescriptor' : {\r\n        '@xmlns': 'urn:oasis:names:tc:SAML:2.0:metadata',\r\n        '@xmlns:ds': 'http://www.w3.org/2000/09/xmldsig#',\r\n        '@entityID': this.options.issuer,\r\n        '@ID': this.options.issuer.replace(/\\W/g, '_'),\r\n        'SPSSODescriptor' : {\r\n          '@protocolSupportEnumeration': 'urn:oasis:names:tc:SAML:2.0:protocol',\r\n        },\r\n      }\r\n    };\r\n\r\n    if (this.options.decryptionPvk) {\r\n      if (!decryptionCert) {\r\n        throw new Error(\r\n          \"Missing decryptionCert while generating metadata for decrypting service provider\");\r\n      }\r\n    }\r\n    if(this.options.privateKey){\r\n      if(!signingCert){\r\n        throw new Error(\r\n          \"Missing signingCert while generating metadata for signing service provider messages\");\r\n      }\r\n    }\r\n\r\n    if(this.options.decryptionPvk || this.options.privateKey){\r\n      metadata.EntityDescriptor.SPSSODescriptor.KeyDescriptor=[];\r\n      if (this.options.privateKey) {\r\n\r\n        signingCert = signingCert!.replace( /-+BEGIN CERTIFICATE-+\\r?\\n?/, '' );\r\n        signingCert = signingCert.replace( /-+END CERTIFICATE-+\\r?\\n?/, '' );\r\n        signingCert = signingCert.replace( /\\r\\n/g, '\\n' );\r\n\r\n        metadata.EntityDescriptor.SPSSODescriptor.KeyDescriptor.push({\r\n          '@use': 'signing',\r\n          'ds:KeyInfo' : {\r\n            'ds:X509Data' : {\r\n              'ds:X509Certificate': {\r\n                '#text': signingCert\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      if (this.options.decryptionPvk) {\r\n\r\n        decryptionCert = decryptionCert!.replace( /-+BEGIN CERTIFICATE-+\\r?\\n?/, '' );\r\n        decryptionCert = decryptionCert.replace( /-+END CERTIFICATE-+\\r?\\n?/, '' );\r\n        decryptionCert = decryptionCert.replace( /\\r\\n/g, '\\n' );\r\n\r\n        metadata.EntityDescriptor.SPSSODescriptor.KeyDescriptor.push({\r\n          '@use': 'encryption',\r\n          'ds:KeyInfo' : {\r\n            'ds:X509Data' : {\r\n              'ds:X509Certificate': {\r\n                '#text': decryptionCert\r\n              }\r\n            }\r\n          },\r\n          'EncryptionMethod' : [\r\n            // this should be the set that the xmlenc library supports\r\n            { '@Algorithm': 'http://www.w3.org/2001/04/xmlenc#aes256-cbc' },\r\n            { '@Algorithm': 'http://www.w3.org/2001/04/xmlenc#aes128-cbc' },\r\n            { '@Algorithm': 'http://www.w3.org/2001/04/xmlenc#tripledes-cbc' }\r\n          ]\r\n        });\r\n      }\r\n    }\r\n\r\n    if (this.options.logoutCallbackUrl) {\r\n      metadata.EntityDescriptor.SPSSODescriptor.SingleLogoutService = {\r\n        '@Binding': 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST',\r\n        '@Location': this.options.logoutCallbackUrl\r\n      };\r\n    }\r\n\r\n    if (this.options.identifierFormat) {\r\n      metadata.EntityDescriptor.SPSSODescriptor.NameIDFormat = this.options.identifierFormat;\r\n    }\r\n\r\n    metadata.EntityDescriptor.SPSSODescriptor.AssertionConsumerService = {\r\n      '@index': '1',\r\n      '@isDefault': 'true',\r\n      '@Binding': 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST',\r\n      '@Location': this.getCallbackUrl({})\r\n    };\r\n    return xmlbuilder.create(metadata as unknown as Record<string, any>).end({ pretty: true, indent: '  ', newline: '\\n' });\r\n  }\r\n\r\n  keyToPEM(key: crypto.KeyLike) {\r\n    if (!key || typeof key !== 'string') return key;\r\n\r\n    const lines = key.split(/\\r?\\n/);\r\n    if (lines.length !== 1) return key;\r\n\r\n    const wrappedKey = [\r\n      '-----BEGIN PRIVATE KEY-----',\r\n      ...(key.match(/.{1,64}/g) ?? []),\r\n      '-----END PRIVATE KEY-----',\r\n      ''\r\n    ].join('\\n');\r\n    return wrappedKey;\r\n  }\r\n\r\n  normalizeNewlines(xml : string) : string {\r\n    // we can use this utility before passing XML to `xml-crypto`\r\n    // we are considered the XML processor and are responsible for newline normalization\r\n    // https://github.com/node-saml/passport-saml/issues/431#issuecomment-718132752\r\n    return xml.replace(/\\r\\n?/g, \"\\n\");\r\n  }\r\n}\r\n\r\nexport { SAML };\r\n"]}
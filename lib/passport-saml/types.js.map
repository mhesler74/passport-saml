{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/passport-saml/types.ts"],"names":[],"mappings":"","sourcesContent":["import type * as express from 'express';\r\nimport * as passport from 'passport';\r\nimport type { CacheProvider } from './inmemory-cache-provider';\r\n\r\nexport type CertCallback = (callback: (err: Error | null, cert?: string | string[]) => void) => void;\r\n\r\nexport interface AuthenticateOptions extends passport.AuthenticateOptions {\r\n  additionalParams?: Record<string, any>;\r\n}\r\n\r\nexport interface AuthorizeOptions extends AuthenticateOptions {\r\n  samlFallback?: 'login-request' | 'logout-request';\r\n}\r\n\r\nexport interface SAMLOptions {\r\n    // Core\r\n    callbackUrl: string;\r\n    path: string;\r\n    protocol: string;\r\n    host: string;\r\n    entryPoint: string;\r\n    issuer: string;\r\n    /** @deprecated use privateKey field instead */\r\n    privateCert?: string;\r\n    privateKey: string;\r\n    cert: string | string[] | CertCallback;\r\n    decryptionPvk: string;\r\n    signatureAlgorithm: 'sha1' | 'sha256' | 'sha512';\r\n\r\n    // Additional SAML behaviors\r\n    additionalParams: Record<string, string>;\r\n    additionalAuthorizeParams: Record<string, string>;\r\n    identifierFormat: string;\r\n    acceptedClockSkewMs: number;\r\n    attributeConsumingServiceIndex: string | null;\r\n    disableRequestedAuthnContext: boolean;\r\n    authnContext: string | string[];\r\n    forceAuthn: boolean;\r\n    skipRequestCompression: boolean;\r\n    authnRequestBinding?: string;\r\n    RACComparison: 'exact' | 'minimum' | 'maximum' | 'better';\r\n    providerName: string;\r\n    passive: boolean;\r\n    idpIssuer: string;\r\n    audience: string;\r\n    scoping : SamlScopingConfig;\r\n\r\n    // InResponseTo Validation\r\n    validateInResponseTo: boolean;\r\n    requestIdExpirationPeriodMs: number;\r\n    cacheProvider: CacheProvider;\r\n\r\n    // Logout\r\n    logoutUrl: string;\r\n    additionalLogoutParams: Record<string, string>;\r\n    logoutCallbackUrl: string;\r\n\r\n    // extras\r\n    xmlSignatureTransforms: string[];\r\n    digestAlgorithm: string;\r\n    disableRequestACSUrl: boolean;\r\n}\r\n\r\nexport type SamlConfig = Partial<SAMLOptions> & StrategyOptions\r\n\r\ninterface StrategyOptions {\r\n    name?: string;\r\n    passReqToCallback?: boolean;\r\n}\r\n\r\nexport interface SamlScopingConfig {\r\n  idpList?: SamlIDPListConfig[];\r\n  proxyCount?: number;\r\n  requesterId?: string[];\r\n}\r\n\r\nexport type XMLValue = string | number | boolean | null | XMLObject | XMLValue[];\r\n\r\nexport type XMLObject = {\r\n  [key: string]: XMLValue;\r\n};\r\n\r\nexport type XMLInput = XMLObject;\r\n\r\nexport interface AuthorizeRequestXML {\r\n  'samlp:AuthnRequest': XMLInput;\r\n}\r\n\r\nexport interface LogoutRequestXML {\r\n  'samlp:LogoutRequest': {\r\n    'saml:NameID': XMLInput;\r\n    [key: string]: XMLValue;\r\n  };\r\n}\r\n\r\nexport interface ServiceMetadataXML {\r\n  EntityDescriptor: {\r\n    [key: string]: XMLValue;\r\n    SPSSODescriptor: XMLObject;\r\n  };\r\n}\r\n\r\nexport interface AudienceRestrictionXML {\r\n  Audience?: XMLObject[];\r\n}\r\n\r\nexport type XMLOutput = Record<string, any>;\r\n\r\nexport interface SamlIDPListConfig {\r\n  entries: SamlIDPEntryConfig[];\r\n  getComplete?: string;\r\n}\r\n\r\nexport interface SamlIDPEntryConfig {\r\n  providerId: string;\r\n  name?: string;\r\n  loc?: string;\r\n}\r\n\r\nexport type Profile = {\r\n    issuer?: string;\r\n    sessionIndex?: string;\r\n    nameID?: string;\r\n    nameIDFormat?: string;\r\n    nameQualifier?: string;\r\n    spNameQualifier?: string;\r\n    ID?: string;\r\n    mail?: string; // InCommon Attribute urn:oid:0.9.2342.19200300.100.1.3\r\n    email?: string; // `mail` if not present in the assertion\r\n    ['urn:oid:0.9.2342.19200300.100.1.3']?: string;\r\n    getAssertionXml(): string; // get the raw assertion XML\r\n    getAssertion(): Record<string, unknown>; // get the assertion XML parsed as a JavaScript object\r\n    getSamlResponseXml(): string; // get the raw SAML response XML\r\n  } & {\r\n    [attributeName: string]: unknown; // arbitrary `AttributeValue`s\r\n  };\r\n\r\n  export interface RequestWithUser extends express.Request {\r\n    samlLogoutRequest: any;\r\n    user?: Profile\r\n}\r\n\r\nexport type VerifiedCallback = (err: Error | null, user?: Record<string, unknown>, info?: Record<string, unknown>) => void;\r\n\r\nexport type VerifyWithRequest = (req: express.Request, profile: Profile | null | undefined, done: VerifiedCallback) => void;\r\n\r\nexport type VerifyWithoutRequest = (profile: Profile | null | undefined, done: VerifiedCallback) => void;\r\n\r\nexport type SamlOptionsCallback = (err: Error | null, samlOptions?: SamlConfig) => void;\r\n\r\nexport interface MultiSamlConfig extends SamlConfig {\r\n  getSamlOptions(req: express.Request, callback: SamlOptionsCallback): void;\r\n}\r\n"]}